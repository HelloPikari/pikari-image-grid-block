name: CI

on:
    push:
        branches: [main, develop]
        tags:
            - 'v*'
    pull_request:
        branches: [main]

permissions:
    contents: write
    packages: read

jobs:
    lint:
        runs-on: ubuntu-latest
        continue-on-error: true

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run JavaScript linting
              run: npm run lint:js

            - name: Run CSS linting
              run: npm run lint:css

    php-lint:
        runs-on: ubuntu-latest
        continue-on-error: true

        strategy:
            matrix:
                php-version: ['8.2', '8.3', '8.4']

        steps:
            - uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  tools: composer:v2
                  coverage: none

            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress

            - name: Run PHP linting
              run: composer lint

    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build plugin
              run: npm run build

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-files
                  path: build/

    test-js:
        runs-on: ubuntu-latest
        continue-on-error: true

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Check if tests exist
              id: check_tests
              run: |
                  if [ -d "tests" ] || [ -d "test" ] || [ -d "__tests__" ]; then
                    echo "has_tests=true" >> $GITHUB_OUTPUT
                  else
                    echo "has_tests=false" >> $GITHUB_OUTPUT
                    echo "No test directory found, skipping tests"
                  fi

            - name: Run JavaScript tests
              if: steps.check_tests.outputs.has_tests == 'true'
              run: |
                  # Check which test command is available
                  if npm run | grep -q "test:unit"; then
                    npm run test:unit -- --coverage
                  elif npm run | grep -q "test "; then
                    npm test -- --coverage
                  else
                    echo "No test script found in package.json"
                    exit 0
                  fi

            - name: Upload coverage reports
              if: steps.check_tests.outputs.has_tests == 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-js
                  path: tests/coverage/

    create-zip:
        needs: [lint, php-lint, build, test-js]
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build plugin
              run: npm run build

            - name: Create plugin ZIP
              run: npm run plugin-zip

            - name: Upload plugin ZIP
              uses: actions/upload-artifact@v4
              with:
                  name: pikari-image-grid-block
                  path: pikari-image-grid-block.zip

    release:
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/v')

        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}

            - name: Get plugin slug
              id: plugin_info
              run: |
                  PLUGIN_SLUG=$(basename "$PWD")
                  echo "slug=$PLUGIN_SLUG" >> $GITHUB_OUTPUT

                  # Verify ZIP file exists
                  if [ ! -f "${PLUGIN_SLUG}.zip" ]; then
                    echo "ERROR: ${PLUGIN_SLUG}.zip not found. Tag may not be from build branch."
                    exit 1
                  fi
                  echo "âœ“ Found ${PLUGIN_SLUG}.zip"
                  ls -la "${PLUGIN_SLUG}.zip"

            - name: Extract version from tag
              id: get_version
              run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Extract release notes
              id: extract_notes
              run: |
                  VERSION="${{ steps.get_version.outputs.VERSION }}"
                  # Extract the section for this version from CHANGELOG.md
                  if [ -f "CHANGELOG.md" ]; then
                    sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
                    echo "Release notes extracted for version $VERSION"
                  else
                    echo "No CHANGELOG.md found, creating simple release notes"
                    echo "Release version $VERSION" > release_notes.md
                  fi

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: ${{ steps.plugin_info.outputs.slug }}.zip
                  body_path: release_notes.md
                  prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
